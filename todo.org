* Inbox
** TODO Lexer Maschine DFA Construction
Awlays push DFA State forward

[[file:~/projects/MLCC/src/lexer.rs::next: HashMap<Term, NDANext>]]
** TODO Regex Reverse NDA

The Regex Maschine can be condensed if constructed from the back by tracing identical Paths
This would require backrefs to the previous State eg. doubley linked list

[[file:~/projects/MLCC/src/lexer.rs]]
** TODO NDA Merger

- Backtracking nicht mÃ¶glich
- lookahead Term?
  if next is optional -> skip
  current is match or any

[[file:~/projects/MLCC/src/lexer.rs::match term {]]
** TODO Astt

func(function{name, body}){
   return [
       LINE(name + "(){"),
       INDENT(body),
       LINE("}")
   ];
}
** TODO Fix Regex "+" Operator

Current implementation creates duplicates when used in conjunction with Patterns, which could be avoided

[[file:~/projects/MLCC/src/lexer.rs::regex_list:]]
** TODO Global Variable

"$IDENT"

either in gobal scope or in structured definition

- Global Variable has to be initlizied;
- capture on reduction and reset value

[[file:~/projects/MLCC/src/lexer.rs::index: usize]]
** TODO Refactor NDA Collapse

implement Regex NDA Collapse

[[file:~/projects/MLCC/src/lexer.rs:://]]
** TODO Design Auto-Struct/Integrated Regex Grammar
** TODO Multi Lexer

[[file:~/projects/MLCC/src/reverseparse.rs::\[derive(Debug)\]]]
** TODO Generate own Parser

[[file:~/projects/MLCC/gramma.g::->Reductend;]]
** TODO Compress Headers with BTreeMaps

BTreeSet<Path> -> BTreeMap<Position, BTreeSet<Token>>

[[file:~/projects/MLCC/src/lr.rs::fn normalize_header(rules: &'a Vec<parser::Rule>, expand: BTreeSet<Path>) -> Result<BTreeSet<Path>, Error>{]]
** [X] Insert EOF Token in start state
                            if path.import.is_empty(){
                            BTreeSet::from([Token::EOF])
                            } else {
                                path.import
                            }

[[file:~/projects/MLCC/src/lr.rs::if path.import.is_empty(){
 BTreeSet::from(\[Token::EOF\])
 } else {
 path.import
 }]]
** [X] dont store unnormalized headers in states

[[file:~/projects/MLCC/src/lr.rs::fn add_state(&mut self, mut state_header: BTreeSet<Path>) -> Result<(), Error>{]]
